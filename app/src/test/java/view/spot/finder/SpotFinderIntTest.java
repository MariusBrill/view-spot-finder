/*
 * This Java source file was generated by the Gradle \"init\" task.
 */
package view.spot.finder;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import view.spot.finder.data.mesh.Mesh;
import view.spot.finder.data.models.Element;
import view.spot.finder.spotfinder.MeshSpotFinder;

import java.util.Arrays;
import java.util.List;

class SpotFinderIntTest {
    @Test void verifySingleSpot() {
        String meshJSON = "{ "
                    + "\"nodes\": ["
                        + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                        + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                        + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                        + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                        + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                        + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                         + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0}"
                    + "],"
                    + "\"elements\": ["
                        +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                        +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                        +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]}"

                    + "],"
                    + "\"values\": ["
                        + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                        + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                        + "{\"element_id\": \"element_id3\", \"value\": 0.0}"
                    + "]"
                + "}";
        Element expectedElement = new Element("element_id2", "node_id1", "node_id4", "node_id5");
        expectedElement.setHeight(1);
        List<Element> expected = List.of(expectedElement);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(1);

        Assertions.assertEquals(expected, actual);
    }

    @Test void verifyMultiElementSpot(){
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id8\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id9\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]},"
                +"{\"id\": \"element_id4\", \"nodes\": [\"node_id7\", \"node_id8\", \"node_id9\"]}"
                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id4\", \"value\": 0.0}"
                + "]"
                + "}";
        Element expectedElement = new Element("element_id2", "node_id1", "node_id4", "node_id5");
        expectedElement.setHeight(1);
        List<Element> expected = List.of(expectedElement);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(1);

        Assertions.assertEquals(expected, actual);
    }

    @Test void verifyStrictlyIncreasingSpot() {
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]}"

                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 2.0}"
                + "]"
                + "}";
        Element expectedElement = new Element("element_id3", "node_id5", "node_id6", "node_id7");
        expectedElement.setHeight(2);
        List<Element> expected = List.of(expectedElement);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(1);

        Assertions.assertEquals(expected, actual);
    }

    @Test void verifyMultipleSpots() {
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id8\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id9\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]},"
                +"{\"id\": \"element_id4\", \"nodes\": [\"node_id7\", \"node_id8\", \"node_id9\"]}"

                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id4\", \"value\": 1.0}"
                + "]"
                + "}";
        Element expectedElement1 = new Element("element_id2", "node_id1", "node_id4", "node_id5");
        expectedElement1.setHeight(1);
        Element expectedElement2 = new Element("element_id4", "node_id7", "node_id8", "node_id9");
        expectedElement2.setHeight(1);
        List<Element> expected = List.of(expectedElement1, expectedElement2);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(2);

        Assertions.assertEquals(expected, actual);
    }

    @Test void verifyLimitExceedsSpots() {
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id8\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id9\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]},"
                +"{\"id\": \"element_id4\", \"nodes\": [\"node_id7\", \"node_id8\", \"node_id9\"]}"

                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id4\", \"value\": 1.0}"
                + "]"
                + "}";
        Element expectedElement1 = new Element("element_id2", "node_id1", "node_id4", "node_id5");
        expectedElement1.setHeight(1);
        Element expectedElement2 = new Element("element_id4", "node_id7", "node_id8", "node_id9");
        expectedElement2.setHeight(1);
        List<Element> expected = Arrays.asList(expectedElement1, expectedElement2);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(50);

        Assertions.assertEquals(expected, actual);
    }

    @Test void verifySpotLimitReached() {
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id8\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id9\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]},"
                +"{\"id\": \"element_id4\", \"nodes\": [\"node_id7\", \"node_id8\", \"node_id9\"]}"

                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id4\", \"value\": 1.0}"
                + "]"
                + "}";
        Element expectedElement = new Element("element_id2", "node_id1", "node_id4", "node_id5");
        expectedElement.setHeight(1);
        List<Element> expected = List.of(expectedElement);

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(1);

        Assertions.assertEquals(expected, actual);
    }

    @Test void nIsZero() {
        String meshJSON = "{ "
                + "\"nodes\": ["
                + "{\"id\": \"node_id1\", \"x\": 0.0, \"y\": 1.0},"
                + "{\"id\": \"node_id2\", \"x\": 1.0, \"y\": 2.0},"
                + "{\"id\": \"node_id3\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id4\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id5\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id6\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id7\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id8\", \"x\": 3.0, \"y\": 4.0},"
                + "{\"id\": \"node_id9\", \"x\": 3.0, \"y\": 4.0}"
                + "],"
                + "\"elements\": ["
                +"{\"id\": \"element_id1\", \"nodes\": [\"node_id1\", \"node_id2\", \"node_id3\"]},"
                +"{\"id\": \"element_id2\", \"nodes\": [\"node_id1\", \"node_id4\", \"node_id5\"]},"
                +"{\"id\": \"element_id3\", \"nodes\": [\"node_id5\", \"node_id6\", \"node_id7\"]},"
                +"{\"id\": \"element_id4\", \"nodes\": [\"node_id7\", \"node_id8\", \"node_id9\"]}"

                + "],"
                + "\"values\": ["
                + "{\"element_id\": \"element_id1\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id2\", \"value\": 1.0},"
                + "{\"element_id\": \"element_id3\", \"value\": 0.0},"
                + "{\"element_id\": \"element_id4\", \"value\": 1.0}"
                + "]"
                + "}";

        Mesh mesh = Mesh.fromJsonString(meshJSON);
        MeshSpotFinder finder = new MeshSpotFinder(mesh);
        List<Element> actual = finder.findSpots(0);

        Assertions.assertEquals(actual.size(), 0);
    }
}
